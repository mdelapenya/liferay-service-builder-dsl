group 'com.liferay'
version '1.0.0-SNAPSHOT'

apply plugin: 'com.liferay.source.formatter'
apply plugin: 'findbugs'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'pmd'

sourceCompatibility = "1.8"

buildscript {
	dependencies {
		classpath group: 'com.liferay', name: 'com.liferay.gradle.plugins.source.formatter', version: '1.0.1'
	}

	repositories {
		mavenCentral()
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compile group: "com.fasterxml.jackson.dataformat", name: "jackson-dataformat-xml", version: "2.6.3"
	compile group: "org.apache.logging.log4j", name: "log4j-api", version: "2.8.2"
	compile group: "org.apache.logging.log4j", name: "log4j-core", version: "2.8.2"
	compile group: "org.codehaus.woodstox", name: "woodstox-core-asl", version: "4.4.1"

	testCompile group: "junit", name: "junit", version: "4.12"
}

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled true
		html.enabled false
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled false
	}
}

test {
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"

		exceptionFormat = 'full'
	}

	afterSuite { desc, result ->
		if (!desc.parent) {
			def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			def startItem = '|  ', endItem = '  |'
			def repeatLength = startItem.length() + output.length() + endItem.length()

			println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
		}
	}
}

test.outputs.upToDateWhen {false}